pragma solidity ^0.6.0;

import "./SafeMath.sol";

contract DividendCampaign  {
    
    using SafeMath for uint256;
   
    uint internal one8 = uint(100000000);
    
    uint internal one18 = uint(1000000000000000000);
    

    uint  duration = 604800;
    
    uint public amountETH;
    
    uint public startTime;
    
    bool public active = false;

    mapping (address => dividend) private _dividends;
    
    struct dividend {
        uint amount; //Amount of coins
        uint price; //Price in ETH
    }
    
    constructor (uint _amountETH ) public {
        _start(_amountETH);
    }
    
    function getDividendAmount(address address_) public view returns (uint) {
        return _dividends[address_].amount;
    }
    
    function getDividendPrice(address address_) public view returns (uint) {
        return _dividends[address_].price;
    }
    
    function dividendPayed(address address_) public view returns (bool) {
        return (_dividends[address_].amount > 0);
    }
    
    function getRestTime() public view returns (uint) {
        uint resttime = now - startTime;
        if (resttime >= duration) {
            resttime = 0;
        } else {
            resttime = duration - resttime;
        }
        return resttime;
    }
    
    
    function update() public {
         if ((now - startTime)>duration) {
            _stop();
         }    
     }
     
    /* function getAvailableAmount(uint _noOfShares, uint _totalNoOfShares, uint _priceCHFETH, uint _collateralLevel) public view returns (uint) {
        uint share = _noOfShares.mul(one18).div(_totalNoOfShares);
        uint price = share.mul(amountETH).div(one18);
        uint noCoins = price.mul(one8).div(_priceCHFETH);
        
        if (_collateralLevel< one18.mul(100)) {
            noCoins = noCoins.mul(50).div(100);
        }
        if (_collateralLevel< one18.mul(50)) {
            noCoins = noCoins.mul(50).div(100);
        }
        return noCoins;
    } */
     
     
    function createDividend(address account, uint _noOfShares, uint _totalNoOfShares, uint _priceCHFETH, uint _collateralLevel) public  returns (bool) {
        
        uint share = _noOfShares.mul(one18).div(_totalNoOfShares);
        uint price = share.mul(amountETH).div(one18);
        uint noCoins = price.mul(one8).div(_priceCHFETH);
        
        if (_collateralLevel< one18.mul(100)) {
            noCoins = noCoins.mul(50).div(100);
        }
        if (_collateralLevel< one18.mul(50)) {
            noCoins = noCoins.mul(50).div(100);
        }
        
        _dividends[account] = dividend(noCoins,price);
        
        return true;
    }
     
    function _start(uint _amountETH) private {
        if (_amountETH>0) {
            amountETH = _amountETH;
            active = true;
            startTime = now;    
        } else {
            _stop();
        }
        
     }
     
     function _stop() private {
        amountETH = 0;
        active = false;
        startTime = 0;
     }
    
}
